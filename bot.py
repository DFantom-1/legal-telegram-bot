import logging
import asyncio
import re
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ChatMember
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.constants import ChatMemberStatus, ParseMode
import anthropic
import json
import os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
TELEGRAM_TOKEN = "7820689370:AAG0JG0P1ShEGuesDv6Uy6blncmal6A506Y"
ANTHROPIC_API_KEY = "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"
LAWYER_PHONE = "+380983607200"
LAWYER_TELEGRAM_ID = None  # –ü–æ–∫–∏ None –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
LAWYER_USERNAME = "Law_firm_zakhyst"
GROUP_CHAT_ID = None  # –ü–æ–∫–∏ None –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö

# –†–µ–∂–∏–º —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è - –¥–æ–∑–≤–æ–ª—è—î —Ä–æ–±–æ—Ç—É –±–µ–∑ –≥—Ä—É–ø–∏
TESTING_MODE = True

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Claude –∫–ª—ñ—î–Ω—Ç–∞
anthropic_client = anthropic.Anthropic(api_key=ANTHROPIC_API_KEY)

class LegalGroupBot:
    def __init__(self):
        self.user_conversations = {}  # –ó–±–µ—Ä—ñ–≥–∞—î —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        self.banned_words = [
            '–¥—É—Ä–∞–∫', '—ñ–¥—ñ–æ—Ç', '—Ç—É–ø–∏–π', '–¥–µ–±—ñ–ª', '–∫—Ä–µ—Ç–∏–Ω', '—É—Ä–æ–¥', 
            '–º—É–¥–∞–∫', '—Å—É–∫–∞', '–±–ª—è–¥—å', '—Ö—É–π', '–ø—ñ–∑–¥–∞', '—ó–±–∞—Ç–∏'
        ]
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–∏—Ö —Ñ—Ä–∞–∑ –¥–ª—è —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ
        self.greeting_variants = [
            "üëã **–í—ñ—Ç–∞—é, {username}!**\n\nüèõÔ∏è –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —é—Ä–∏–¥–∏—á–Ω–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç!",
            "ü§ù **–î–æ–±—Ä–æ–≥–æ –¥–Ω—è, {username}!**\n\n‚öñÔ∏è –†–∞–¥–∏–π –≤—ñ—Ç–∞—Ç–∏ –≤–∞—Å —É –Ω–∞—à—ñ–π —é—Ä–∏–¥–∏—á–Ω—ñ–π –≥—Ä—É–ø—ñ!",
            "üëã **–ü—Ä–∏–≤—ñ—Ç, {username}!**\n\nüèõÔ∏è –ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –±—É–¥—å-—è–∫–∏–º–∏ –ø—Ä–∞–≤–æ–≤–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏!"
        ]
        
    async def setup_group_settings(self, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏ –¥–ª—è –∞–Ω–æ–Ω—ñ–º–Ω–æ—Å—Ç—ñ"""
        try:
            # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≥—Ä—É–ø–∏ (–ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
            await context.bot.set_chat_permissions(
                chat_id=GROUP_CHAT_ID,
                permissions={
                    'can_send_messages': True,
                    'can_send_media_messages': False,
                    'can_send_polls': False,
                    'can_send_other_messages': False,
                    'can_add_web_page_previews': False,
                    'can_change_info': False,
                    'can_invite_users': False,
                    'can_pin_messages': False
                }
            )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏: {e}")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö"""
        if update.effective_chat.type != 'private':
            return
            
        welcome_text = """
üèõÔ∏è **–í—ñ—Ç–∞—î–º–æ –≤ —é—Ä–∏–¥–∏—á–Ω—ñ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó!**

üîπ –Ø –Ω–∞–¥–∞—é –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ —é—Ä–∏–¥–∏—á–Ω—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
üîπ –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –±–∞–∑—É—é—Ç—å—Å—è –Ω–∞ —á–∏–Ω–Ω–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤—ñ –£–∫—Ä–∞—ó–Ω–∏
üîπ –ü—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –º–æ–∂–µ—Ç–µ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞—à–∏–º –∞–¥–≤–æ–∫–∞—Ç–æ–º

‚öñÔ∏è **–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ—ó —é—Ä–∏–¥–∏—á–Ω–æ—ó –≥—Ä—É–ø–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π!**

üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º: /lawyer
        """
        
        keyboard = [
            [InlineKeyboardButton("üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º", callback_data="contact_lawyer")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

    def is_legal_question(self, text: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Å—Ç–æ—Å—É—î—Ç—å—Å—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —é—Ä–∏–¥–∏—á–Ω–æ—ó —Ç–µ–º–∞—Ç–∏–∫–∏"""
        legal_keywords = [
            '–∑–∞–∫–æ–Ω', '–ø—Ä–∞–≤–æ', '—Å—É–¥', '–ø–æ–∑–æ–≤', '–¥–æ–≥–æ–≤—ñ—Ä', '—à—Ç—Ä–∞—Ñ', '–ø–æ—Ä—É—à–µ–Ω–Ω—è',
            '—é—Ä–∏—Å—Ç', '–∞–¥–≤–æ–∫–∞—Ç', '–∫–æ–¥–µ–∫—Å', '—Å—Ç–∞—Ç—Ç—è', '–Ω–æ—Ä–º–∞', '–ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è',
            '–≤—ñ–¥—à–∫–æ–¥—É–≤–∞–Ω–Ω—è', '–∫–æ–º–ø–µ–Ω—Å–∞—Ü—ñ—è', '–ø–æ–∑–±–∞–≤–ª–µ–Ω–Ω—è', '–ø–æ–∫–∞—Ä–∞–Ω–Ω—è', '—Å—Ç–∞—Ç—É—Ç',
            '—Ç—Ä—É–¥–æ–≤', '—Å—ñ–º–µ–π–Ω', '—Ü–∏–≤—ñ–ª—å–Ω', '–∫—Ä–∏–º—ñ–Ω–∞–ª—å–Ω', '–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω',
            '–≤–ª–∞—Å–Ω—ñ—Å—Ç—å', '—Å–ø–∞–¥—â–∏–Ω–∞', '–∞–ª—ñ–º–µ–Ω—Ç–∏', '—Ä–æ–∑–ª—É—á–µ–Ω–Ω—è', '—à–ª—é–±',
            '–∂–∏—Ç–ª–æ', '–æ—Ä–µ–Ω–¥–∞', '–∫—É–ø—ñ–≤–ª—è', '–ø—Ä–æ–¥–∞–∂', '–±–æ—Ä–≥', '–∫—Ä–µ–¥–∏—Ç',
            '—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è', '–ø–µ–Ω—Å—ñ—è', '—Å–æ—Ü—ñ–∞–ª—å–Ω', '–æ—Å–≤—ñ—Ç', '–º–µ–¥–∏—Ü–∏–Ω'
        ]
        
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in legal_keywords)

    def contains_profanity(self, text: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É –ª–µ–∫—Å–∏–∫—É"""
        text_lower = text.lower()
        return any(word in text_lower for word in self.banned_words)

    async def get_claude_response(self, question: str, user_id: int) -> str:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Claude"""
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            conversation_history = self.user_conversations.get(user_id, [])
            
            # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É
            system_prompt = """
–í–∏ - –∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π —é—Ä–∏—Å—Ç –≤ –£–∫—Ä–∞—ó–Ω—ñ. –ù–∞–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ —é—Ä–∏–¥–∏—á–Ω—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.

–û–ë–û–í'–Ø–ó–ö–û–í–Ü –í–ò–ú–û–ì–ò:
1. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ —Ç—ñ–ª—å–∫–∏ –Ω–∞ —é—Ä–∏–¥–∏—á–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
2. –ü–æ—Å–∏–ª–∞–π—Ç–µ—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –Ω–æ—Ä–º–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–∞
3. –ù–∞–¥–∞–≤–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏
4. –°—Ç—Ä—É–∫—Ç—É—Ä—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á—ñ—Ç–∫–æ —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–æ
5. –ó–∞–≤–∂–¥–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∞–¥–≤–æ–∫–∞—Ç–∞ —É —Å–∫–ª–∞–¥–Ω–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö

–§–û–†–ú–ê–¢ –í–Ü–î–ü–û–í–Ü–î–Ü:
üìã –ö–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
‚öñÔ∏è –ü—Ä–∞–≤–æ–≤–∞ –±–∞–∑–∞ (–ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–∫–æ–Ω–∏/–∫–æ–¥–µ–∫—Å–∏)
üí° –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏
‚ö†Ô∏è –ó–∞—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)

–ù–ï –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, —â–æ –Ω–µ —Å—Ç–æ—Å—É—é—Ç—å—Å—è –ø—Ä–∞–≤–∞.
            """
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é
            messages = [{"role": "system", "content": system_prompt}]
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤–∏
            for msg in conversation_history[-6:]:  # –û—Å—Ç–∞–Ω–Ω—ñ 6 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                messages.append({"role": "user" if msg["from"] == "user" else "assistant", "content": msg["text"]})
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
            messages.append({"role": "user", "content": question})
            
            response = anthropic_client.messages.create(
                model="claude-3-sonnet-20240229",
                max_tokens=1500,
                messages=messages
            )
            
            return response.content[0].text
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ Claude API: {e}")
            return "‚ùå –í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –Ω–∞—à–æ–≥–æ –∞–¥–≤–æ–∫–∞—Ç–∞."

    async def send_greeting(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, username: str):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –Ω–æ–≤–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
        import random
        
        # –í–∏–±—ñ—Ä –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
        greeting_start = random.choice(self.greeting_variants).format(username=username)
        
        greeting_text = f"""
{greeting_start}

**–©–æ —è –º–æ–∂—É:**
‚öñÔ∏è –ù–∞–¥–∞–≤–∞—Ç–∏ —é—Ä–∏–¥–∏—á–Ω—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
üìã –ü–æ—Å–∏–ª–∞—Ç–∏—Å—è –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–µ –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–æ  
üë®‚Äçüíº –ó'—î–¥–Ω—É–≤–∞—Ç–∏ –∑ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–º –∞–¥–≤–æ–∫–∞—Ç–æ–º
üí° –î–∞–≤–∞—Ç–∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏

**–Ø–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é:**
‚úçÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î —é—Ä–∏–¥–∏—á–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, —ñ —è –Ω–∞–¥–∞–º –¥–µ—Ç–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ –Ω–∞ –∑–∞–∫–æ–Ω–∏ –£–∫—Ä–∞—ó–Ω–∏.

üîπ **–ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç–∞–Ω—å:**
‚Ä¢ "–ß–∏ –º–æ–∂–µ —Ä–æ–±–æ—Ç–æ–¥–∞–≤–µ—Ü—å –∑–≤—ñ–ª—å–Ω–∏—Ç–∏ –∑–∞ –ø—Ä–æ–≥—É–ª?"
‚Ä¢ "–Ø–∫ –æ—Ñ–æ—Ä–º–∏—Ç–∏ —Å–ø–∞–¥—â–∏–Ω—É?"
‚Ä¢ "–©–æ —Ä–æ–±–∏—Ç–∏ –ø—Ä–∏ –ø–æ—Ä—É—à–µ–Ω–Ω—ñ –ø—Ä–∞–≤ —Å–ø–æ–∂–∏–≤–∞—á–∞?"

üìû **–ü–æ—Ç—Ä—ñ–±–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è?** –ó–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞—à–∏–º –∞–¥–≤–æ–∫–∞—Ç–æ–º!
        """
        
        keyboard = [
            [InlineKeyboardButton("üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º", callback_data="contact_lawyer")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(greeting_text, reply_markup=reply_markup, parse_mode='Markdown')

    async def handle_group_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –≥—Ä—É–ø—ñ"""
        # –í —Ä–µ–∂–∏–º—ñ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ–∑–≤–æ–ª—è—î–º–æ —Ä–æ–±–æ—Ç—É –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö
        if TESTING_MODE:
            # –î–æ–∑–≤–æ–ª—è—î–º–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤ –±—É–¥—å-—è–∫–æ–º—É —á–∞—Ç—ñ
            pass
        else:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≥—Ä—É–ø–∞
            if GROUP_CHAT_ID and update.effective_chat.id != int(GROUP_CHAT_ID):
                return
            
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        message_text = update.message.text
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if user_id not in self.user_conversations:
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –Ω–æ–≤–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            await self.send_greeting(update, context, user_id, username)
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤–∏
            self.user_conversations[user_id] = []
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É –ª–µ–∫—Å–∏–∫—É
        if self.contains_profanity(message_text):
            await update.message.delete()
            warning_msg = await update.message.reply_text(
                f"‚ö†Ô∏è @{username}, –±—É–¥—å –ª–∞—Å–∫–∞, –¥–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å –≤–≤—ñ—á–ª–∏–≤–æ—Å—Ç—ñ –≤ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—ñ. –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ."
            )
            # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            context.job_queue.run_once(
                lambda context: context.bot.delete_message(GROUP_CHAT_ID, warning_msg.message_id),
                when=10
            )
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ —é—Ä–∏–¥–∏—á–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
        if not self.is_legal_question(message_text):
            non_legal_responses = [
                "‚ùå –í–∏–±–∞—á—Ç–µ, –∞–ª–µ –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–µ —Å—Ç–æ—Å—É—î—Ç—å—Å—è —é—Ä–∏–¥–∏—á–Ω–æ—ó —Ç–µ–º–∞—Ç–∏–∫–∏.",
                "üèõÔ∏è –Ø –∫–æ–Ω—Å—É–ª—å—Ç—É—é —Ç—ñ–ª—å–∫–∏ –∑ –ø—Ä–∞–≤–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å—Ñ–æ—Ä–º—É–ª—é–π—Ç–µ —é—Ä–∏–¥–∏—á–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.",
                "‚öñÔ∏è –ú–æ—è —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è - —é—Ä–∏–¥–∏—á–Ω—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó. –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤ –ø—Ä–∞–≤–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω–Ω—è—Ö?"
            ]
            
            import random
            response = random.choice(non_legal_responses)
            
            keyboard = [
                [InlineKeyboardButton("üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º", callback_data="contact_lawyer")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(response, reply_markup=reply_markup)
            return

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤ —ñ—Å—Ç–æ—Ä—ñ—é
        self.user_conversations[user_id].append({
            "from": "user",
            "text": message_text,
            "timestamp": datetime.now().isoformat()
        })

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î LAWYER_TELEGRAM_ID)
        if LAWYER_TELEGRAM_ID:
            try:
                await context.bot.send_message(
                    chat_id=LAWYER_TELEGRAM_ID,
                    text=f"üÜï **–ù–æ–≤–µ —é—Ä–∏–¥–∏—á–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è**\n\n"
                         f"üë§ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** @{username} (ID: {user_id})\n"
                         f"‚è∞ **–ß–∞—Å:** {datetime.now().strftime('%H:%M %d.%m.%Y')}\n\n"
                         f"‚ùì **–ó–∞–ø–∏—Ç–∞–Ω–Ω—è:**\n{question}\n\n"
                         f"---\nID –∑–∞–ø–∏—Ç–∞–Ω–Ω—è: `{question_id}`",
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∞–¥–º—ñ–Ω—É: {e}")
                # –í —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ä–æ–±–æ—Ç—É –Ω–∞–≤—ñ—Ç—å –±–µ–∑ –∞–¥–≤–æ–∫–∞—Ç–∞
            
            await update.message.reply_text(
                "‚úÖ **–í–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è!**\n\n"
                "ü§ñ –ì–µ–Ω–µ—Ä—É—é –¥–µ—Ç–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å...\n"
                "‚è∞ –¶–µ –∑–∞–π–º–µ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥.\n\n"
                "üí° –ü—ñ—Å–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–º–æ–∂–µ—Ç–µ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—ó –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó."
            )

        # –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä—É
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Claude
        claude_response = await self.get_claude_response(message_text, user_id)
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
        self.user_conversations[user_id].append({
            "from": "bot",
            "text": claude_response,
            "timestamp": datetime.now().isoformat()
        })

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—î—é –∞–¥–≤–æ–∫–∞—Ç–∞
        final_response = f"""
{claude_response}

---
üë®‚Äçüíº **–ü–æ—Ç—Ä—ñ–±–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –∞–±–æ –¥–æ–ø–æ–º–æ–≥–∞ —É –≤–∏—Ä—ñ—à–µ–Ω–Ω—ñ —Å–∏—Ç—É–∞—Ü—ñ—ó?**
–ù–∞—à –∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –∞–¥–≤–æ–∫–∞—Ç –≥–æ—Ç–æ–≤–∏–π –Ω–∞–¥–∞—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—É –¥–æ–ø–æ–º–æ–≥—É!
        """
        
        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º", callback_data="contact_lawyer")],
            [InlineKeyboardButton("üí∞ –ü–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É", callback_data="payment_info")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        await update.message.reply_text(final_response, reply_markup=reply_markup, parse_mode='Markdown')

    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        
        if query.data == "contact_lawyer":
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –∑–≤'—è–∑–∫—É
            keyboard = [
                [InlineKeyboardButton("üìû –ü–æ–¥–∑–≤–æ–Ω–∏—Ç–∏", callback_data="call_lawyer")],
                [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏", callback_data="chat_lawyer")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üìû **–ó–≤'—è–∑–æ–∫ –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º**\n\n–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –∑–≤'—è–∑–∫—É:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        elif query.data == "call_lawyer":
            # –ù–∞–¥–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –¥–∑–≤—ñ–Ω–∫–∞
            phone_text = f"""
üìû **–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∑–≤'—è–∑–∫—É –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º:**

**{LAWYER_PHONE}**

üïê **–†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏:** –ü–Ω-–ü—Ç 9:00-18:00
‚è∞ **–¢–µ—Ä–º—ñ–Ω–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è:** –ó–∞ –¥–æ–º–æ–≤–ª–µ–Ω—ñ—Å—Ç—é

üí° –Ø–∫—â–æ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ - –∑–∞–ª–∏—à—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å —á–∞—Ç–æ–º.
            """
            
            keyboard = [
                [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ –≤ —á–∞—Ç", callback_data="chat_lawyer")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="contact_lawyer")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(phone_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        elif query.data == "chat_lawyer":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º
            if TESTING_MODE:
                # –í —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ –ø–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
                test_text = f"""
üß™ **–¢–ï–°–¢–û–í–ò–ô –†–ï–ñ–ò–ú**

üì± –î–ª—è –∑–≤'—è–∑–∫—É –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º:
‚Ä¢ **Telegram**: @{LAWYER_USERNAME}
‚Ä¢ **–¢–µ–ª–µ—Ñ–æ–Ω**: {LAWYER_PHONE}

‚öôÔ∏è **–ü—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏:**
‚Ä¢ –ê–¥–≤–æ–∫–∞—Ç –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–æ —á–∞—Ç—É
‚Ä¢ –ü–µ—Ä–µ–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Ä–æ–∑–º–æ–≤–∏

üí° **–ó–∞—Ä–∞–∑ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏:**
‚Ä¢ –ó–∞–¥–∞–≤–∞–Ω–Ω—è —é—Ä–∏–¥–∏—á–Ω–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –±–æ—Ç–æ–º
‚Ä¢ –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é –Ω–µ-—é—Ä–∏–¥–∏—á–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å
                """
                await query.edit_message_text(test_text, parse_mode='Markdown')
            else:
                await self.initiate_lawyer_chat(update, context, user_id)
            
        elif query.data == "payment_info":
            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î –¥–æ –∞–¥–≤–æ–∫–∞—Ç–∞
            payment_text = """
üí∞ **–ü–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ –æ–ø–ª–∞—Ç–∏ –ø–æ—Å–ª—É–≥**

–î–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è –≤–∞—Ä—Ç–æ—Å—Ç—ñ —é—Ä–∏–¥–∏—á–Ω–∏—Ö –ø–æ—Å–ª—É–≥ —Ç–∞ —É–º–æ–≤ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –¥–æ –Ω–∞—à–æ–≥–æ –∞–¥–≤–æ–∫–∞—Ç–∞.

üìû –¢–µ–ª–µ—Ñ–æ–Ω: **{LAWYER_PHONE}**
üí¨ –ê–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –≤ –æ—Å–æ–±–∏—Å—Ç–∏–π —á–∞—Ç
            """.format(LAWYER_PHONE=LAWYER_PHONE)
            
            keyboard = [
                [InlineKeyboardButton("üìû –ü–æ–¥–∑–≤–æ–Ω–∏—Ç–∏", callback_data="call_lawyer")],
                [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏", callback_data="chat_lawyer")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(payment_text, reply_markup=reply_markup, parse_mode='Markdown')

    async def initiate_lawyer_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–Ü–Ω—ñ—Ü—ñ—é–≤–∞–Ω–Ω—è —á–∞—Ç—É –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º"""
        try:
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤–∏
            conversation_history = self.user_conversations.get(user_id, [])
            
            if conversation_history:
                # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é –¥–ª—è –∞–¥–≤–æ–∫–∞—Ç–∞
                history_text = "üìã **–Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑–º–æ–≤–∏ –∑ –±–æ—Ç–æ–º:**\n\n"
                
                for msg in conversation_history[-10:]:  # –û—Å—Ç–∞–Ω–Ω—ñ 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                    timestamp = datetime.fromisoformat(msg["timestamp"]).strftime("%H:%M %d.%m")
                    if msg["from"] == "user":
                        history_text += f"üë§ **[{timestamp}]**: {msg['text']}\n\n"
                    else:
                        history_text += f"ü§ñ **[{timestamp}]**: {msg['text'][:200]}{'...' if len(msg['text']) > 200 else ''}\n\n"
                
                # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —ñ—Å—Ç–æ—Ä—ñ—ó –∞–¥–≤–æ–∫–∞—Ç—É
                await context.bot.send_message(
                    chat_id=LAWYER_TELEGRAM_ID,
                    text=f"üÜï **–ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç —Ö–æ—á–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é**\n\n"
                         f"üë§ **User ID:** {user_id}\n"
                         f"‚è∞ **–ß–∞—Å:** {datetime.now().strftime('%H:%M %d.%m.%Y')}\n\n"
                         f"{history_text}\n"
                         f"---\nüí¨ **–ö–ª—ñ—î–Ω—Ç –æ—á—ñ–∫—É—î –Ω–∞ –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å**",
                    parse_mode='Markdown'
                )
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            success_text = """
‚úÖ **–ó–≤'—è–∑–æ–∫ –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!**

üîÑ –í–∞—à–∞ —Ä–æ–∑–º–æ–≤–∞ –∑ –±–æ—Ç–æ–º –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–¥–≤–æ–∫–∞—Ç—É
üì± –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö
‚è∞ –ó–∞–∑–≤–∏—á–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –ø—Ä–æ—Ç—è–≥–æ–º —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è

üí° –Ø–∫—â–æ —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ - —Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ: **{LAWYER_PHONE}**
            """.format(LAWYER_PHONE=LAWYER_PHONE)
            
            await update.callback_query.edit_message_text(success_text, parse_mode='Markdown')
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ —á–∞—Ç—É –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º
            lawyer_username = await self.get_lawyer_username(context)
            if lawyer_username:
                keyboard = [
                    [InlineKeyboardButton("üí¨ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ —á–∞—Ç—É", url=f"https://t.me/{lawyer_username}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await context.bot.send_message(
                    chat_id=user_id,
                    text="üì± **–ü—Ä—è–º–∏–π –∑–≤'—è–∑–æ–∫ –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º:**",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞—Ü—ñ—ó —á–∞—Ç—É –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º: {e}")
            await update.callback_query.edit_message_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–≤'—è–∑–∫—É. –ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ: **{LAWYER_PHONE}**",
                parse_mode='Markdown'
            )

    async def get_lawyer_username(self, context: ContextTypes.DEFAULT_TYPE) -> str:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è username –∞–¥–≤–æ–∫–∞—Ç–∞"""
        try:
            # –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π username
            return LAWYER_USERNAME
        except:
            # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è, —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ ID
            try:
                lawyer_info = await context.bot.get_chat(LAWYER_TELEGRAM_ID)
                return lawyer_info.username
            except:
                return LAWYER_USERNAME

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ø–æ–º–æ–≥–∏"""
        help_text = """
üèõÔ∏è **–Æ—Ä–∏–¥–∏—á–Ω–∏–π –±–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç**

**–©–æ —è –º–æ–∂—É:**
‚úÖ –ù–∞–¥–∞–≤–∞—Ç–∏ —é—Ä–∏–¥–∏—á–Ω—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
‚úÖ –ü–æ—Å–∏–ª–∞—Ç–∏—Å—è –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–µ –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–æ
‚úÖ –ó'—î–¥–Ω—É–≤–∞—Ç–∏ –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö —Å–ø—Ä–∞–≤
‚úÖ –Ü–Ω—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –ø—Ä–æ –ø—Ä–∞–≤–æ–≤—É –±–∞–∑—É

**–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:**
1Ô∏è‚É£ –ó–∞–¥–∞–π—Ç–µ —é—Ä–∏–¥–∏—á–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ
2Ô∏è‚É£ –û—Ç—Ä–∏–º–∞–π—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ –Ω–∞ –∑–∞–∫–æ–Ω–∏
3Ô∏è‚É£ –ü—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º

**–ö–æ–º–∞–Ω–¥–∏:**
/start - –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞
/lawyer - –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º

üìû **–ê–¥–≤–æ–∫–∞—Ç:** {LAWYER_PHONE}
        """.format(LAWYER_PHONE=LAWYER_PHONE)
        
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def disclaimer(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ñ–¥–º–æ–≤–∞ –≤—ñ–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ"""
        disclaimer_text = """
‚öñÔ∏è **–í–Ü–î–ú–û–í–ê –í–Ü–î –í–Ü–î–ü–û–í–Ü–î–ê–õ–¨–ù–û–°–¢–Ü**

–î–∞–Ω–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –Ω–∞–¥–∞—î –≤–∏–∫–ª—é—á–Ω–æ –∑–∞–≥–∞–ª—å–Ω—É –ø—Ä–∞–≤–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —ñ –Ω–µ —î –∑–∞–º—ñ–Ω–æ—é –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ—ó —é—Ä–∏–¥–∏—á–Ω–æ—ó –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó.

**–û–±–º–µ–∂–µ–Ω–Ω—è:**
‚Ä¢ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –º–æ–∂–µ –±—É—Ç–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª–æ—é
‚Ä¢ –ù–µ –≤—Ä–∞—Ö–æ–≤—É—î –≤—Å—ñ—Ö –Ω—é–∞–Ω—Å—ñ–≤ –≤–∞—à–æ—ó —Å–∏—Ç—É–∞—Ü—ñ—ó  
‚Ä¢ –ù–µ –≥–∞—Ä–∞–Ω—Ç—É—î –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —É 100% –≤–∏–ø–∞–¥–∫—ñ–≤
‚Ä¢ –ù–µ —Å—Ç–≤–æ—Ä—é—î –≤—ñ–¥–Ω–æ—Å–∏–Ω –∞–¥–≤–æ–∫–∞—Ç-–∫–ª—ñ—î–Ω—Ç

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**
‚Ä¢ –î–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö —Å–ø—Ä–∞–≤ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–≤–æ–∫–∞—Ç–∞
‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª–∞—Ö
‚Ä¢ –ù–µ –ø–æ–∫–ª–∞–¥–∞–π—Ç–µ—Å—å –≤–∏–∫–ª—é—á–Ω–æ –Ω–∞ –ø–æ—Ä–∞–¥–∏ –±–æ—Ç–∞

**–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –±–æ—Ç, –≤–∏:**
‚úÖ –†–æ–∑—É–º—ñ—î—Ç–µ –æ–±–º–µ–∂–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É
‚úÖ –ù–µ –ø–æ–∫–ª–∞–¥–∞—î—Ç–µ—Å—å –≤–∏–∫–ª—é—á–Ω–æ –Ω–∞ –π–æ–≥–æ –ø–æ—Ä–∞–¥–∏  
‚úÖ –ë–µ—Ä–µ—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å –∑–∞ —Å–≤–æ—ó —Ä—ñ—à–µ–Ω–Ω—è

–°—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏—Ö —Ü—ñ–ª–µ–π.
        """
        await update.message.reply_text(disclaimer_text, parse_mode='Markdown')

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫"""
        logger.error(f"–ü–æ–º–∏–ª–∫–∞: {context.error}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞
    legal_bot = LegalGroupBot()
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–∞
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    application.job_queue.run_once(
        lambda context: legal_bot.setup_group_settings(context),
        when=1
    )
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", legal_bot.start_command))
    application.add_handler(CommandHandler("help", legal_bot.help_command))
    
    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(legal_bot.handle_callback_query))
    
    # –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö)
    if TESTING_MODE:
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            legal_bot.handle_group_message
        ))
    else:
        # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç—ñ–ª—å–∫–∏ —É –≥—Ä—É–ø—ñ
        application.add_handler(MessageHandler(
            filters.TEXT & filters.ChatType.GROUPS,
            legal_bot.handle_group_message
        ))
    
    # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
    application.add_error_handler(legal_bot.error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    if TESTING_MODE:
        print("üß™ –Æ—Ä–∏–¥–∏—á–Ω–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ –¢–ï–°–¢–û–í–û–ú–£ –†–ï–ñ–ò–ú–Ü!")
        print("üì± –ú–æ–∂–µ—Ç–µ —Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö")
        print("üí¨ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –±–æ—Ç—É /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É")
    else:
        print("üèõÔ∏è –Æ—Ä–∏–¥–∏—á–Ω–∏–π –≥—Ä—É–ø–æ–≤–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    
    print(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –∞–¥–≤–æ–∫–∞—Ç–∞: {LAWYER_PHONE}")
    print(f"üë®‚Äçüíº Username –∞–¥–≤–æ–∫–∞—Ç–∞: @{LAWYER_USERNAME}")
    application.run_polling()

if __name__ == '__main__':
    main()
