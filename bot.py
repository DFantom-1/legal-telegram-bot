import logging
import asyncio
import re
import os
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import anthropic
import random

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', '7820689370:AAG0JG0P1ShEGuesDv6Uy6blncmal6A506Y')
ANTHROPIC_API_KEY = os.getenv('ANTHROPIC_API_KEY', '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')
LAWYER_PHONE = "+380983607200"
LAWYER_USERNAME = "Law_firm_zakhyst"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Claude –∫–ª—ñ—î–Ω—Ç–∞
anthropic_client = anthropic.Anthropic(api_key=ANTHROPIC_API_KEY)

class LegalBot:
    def __init__(self):
        self.user_conversations = {}
        self.banned_words = [
            '–¥—É—Ä–∞–∫', '—ñ–¥—ñ–æ—Ç', '—Ç—É–ø–∏–π', '–¥–µ–±—ñ–ª', '–∫—Ä–µ—Ç–∏–Ω', '—É—Ä–æ–¥', 
            '–º—É–¥–∞–∫', '—Å—É–∫–∞', '–±–ª—è–¥—å', '—Ö—É–π', '–ø—ñ–∑–¥–∞', '—ó–±–∞—Ç–∏'
        ]
        self.greeting_variants = [
            "üëã **–í—ñ—Ç–∞—é, {username}!**\n\nüèõÔ∏è –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —é—Ä–∏–¥–∏—á–Ω–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç!",
            "ü§ù **–î–æ–±—Ä–æ–≥–æ –¥–Ω—è, {username}!**\n\n‚öñÔ∏è –†–∞–¥–∏–π –≤—ñ—Ç–∞—Ç–∏ –≤–∞—Å —É –Ω–∞—à—ñ–π —é—Ä–∏–¥–∏—á–Ω—ñ–π –≥—Ä—É–ø—ñ!",
            "üëã **–ü—Ä–∏–≤—ñ—Ç, {username}!**\n\nüèõÔ∏è –ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –±—É–¥—å-—è–∫–∏–º–∏ –ø—Ä–∞–≤–æ–≤–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏!"
        ]

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_text = """
üèõÔ∏è **–í—ñ—Ç–∞—î–º–æ –≤ —é—Ä–∏–¥–∏—á–Ω—ñ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó!**

üîπ –Ø –Ω–∞–¥–∞—é –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ —é—Ä–∏–¥–∏—á–Ω—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
üîπ –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –±–∞–∑—É—é—Ç—å—Å—è –Ω–∞ —á–∏–Ω–Ω–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤—ñ –£–∫—Ä–∞—ó–Ω–∏
üîπ –ü—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –º–æ–∂–µ—Ç–µ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞—à–∏–º –∞–¥–≤–æ–∫–∞—Ç–æ–º

‚öñÔ∏è **–ó–∞–¥–∞–≤–∞–π—Ç–µ –±—É–¥—å-—è–∫—ñ —é—Ä–∏–¥–∏—á–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è!**

üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º: /lawyer
        """
        
        keyboard = [
            [InlineKeyboardButton("üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º", callback_data="contact_lawyer")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

    def is_legal_question(self, text: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Å—Ç–æ—Å—É—î—Ç—å—Å—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —é—Ä–∏–¥–∏—á–Ω–æ—ó —Ç–µ–º–∞—Ç–∏–∫–∏"""
        legal_keywords = [
            '–∑–∞–∫–æ–Ω', '–ø—Ä–∞–≤–æ', '—Å—É–¥', '–ø–æ–∑–æ–≤', '–¥–æ–≥–æ–≤—ñ—Ä', '—à—Ç—Ä–∞—Ñ', '–ø–æ—Ä—É—à–µ–Ω–Ω—è',
            '—é—Ä–∏—Å—Ç', '–∞–¥–≤–æ–∫–∞—Ç', '–∫–æ–¥–µ–∫—Å', '—Å—Ç–∞—Ç—Ç—è', '–Ω–æ—Ä–º–∞', '–ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è',
            '–≤—ñ–¥—à–∫–æ–¥—É–≤–∞–Ω–Ω—è', '–∫–æ–º–ø–µ–Ω—Å–∞—Ü—ñ—è', '–ø–æ–∑–±–∞–≤–ª–µ–Ω–Ω—è', '–ø–æ–∫–∞—Ä–∞–Ω–Ω—è', '—Å—Ç–∞—Ç—É—Ç',
            '—Ç—Ä—É–¥–æ–≤', '—Å—ñ–º–µ–π–Ω', '—Ü–∏–≤—ñ–ª—å–Ω', '–∫—Ä–∏–º—ñ–Ω–∞–ª—å–Ω', '–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω',
            '–≤–ª–∞—Å–Ω—ñ—Å—Ç—å', '—Å–ø–∞–¥—â–∏–Ω–∞', '–∞–ª—ñ–º–µ–Ω—Ç–∏', '—Ä–æ–∑–ª—É—á–µ–Ω–Ω—è', '—à–ª—é–±',
            '–∂–∏—Ç–ª–æ', '–æ—Ä–µ–Ω–¥–∞', '–∫—É–ø—ñ–≤–ª—è', '–ø—Ä–æ–¥–∞–∂', '–±–æ—Ä–≥', '–∫—Ä–µ–¥–∏—Ç',
            '—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è', '–ø–µ–Ω—Å—ñ—è', '—Å–æ—Ü—ñ–∞–ª—å–Ω', '–æ—Å–≤—ñ—Ç', '–º–µ–¥–∏—Ü–∏–Ω'
        ]
        
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in legal_keywords)

    def contains_profanity(self, text: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É –ª–µ–∫—Å–∏–∫—É"""
        text_lower = text.lower()
        return any(word in text_lower for word in self.banned_words)

    async def get_claude_response(self, question: str, user_id: int) -> str:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Claude"""
        try:
            conversation_history = self.user_conversations.get(user_id, [])
            
            system_prompt = """
–í–∏ - –∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π —é—Ä–∏—Å—Ç –≤ –£–∫—Ä–∞—ó–Ω—ñ. –ù–∞–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ —é—Ä–∏–¥–∏—á–Ω—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.

–û–ë–û–í'–Ø–ó–ö–û–í–Ü –í–ò–ú–û–ì–ò:
1. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ —Ç—ñ–ª—å–∫–∏ –Ω–∞ —é—Ä–∏–¥–∏—á–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
2. –ü–æ—Å–∏–ª–∞–π—Ç–µ—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –Ω–æ—Ä–º–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–∞
3. –ù–∞–¥–∞–≤–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏
4. –°—Ç—Ä—É–∫—Ç—É—Ä—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á—ñ—Ç–∫–æ —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–æ
5. –ó–∞–≤–∂–¥–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∞–¥–≤–æ–∫–∞—Ç–∞ —É —Å–∫–ª–∞–¥–Ω–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö

–§–û–†–ú–ê–¢ –í–Ü–î–ü–û–í–Ü–î–Ü:
üìã –ö–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
‚öñÔ∏è –ü—Ä–∞–≤–æ–≤–∞ –±–∞–∑–∞ (–ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–∫–æ–Ω–∏/–∫–æ–¥–µ–∫—Å–∏)
üí° –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏
‚ö†Ô∏è –ó–∞—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)

–ù–ï –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, —â–æ –Ω–µ —Å—Ç–æ—Å—É—é—Ç—å—Å—è –ø—Ä–∞–≤–∞.
            """
            
            messages = [{"role": "system", "content": system_prompt}]
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤–∏
            for msg in conversation_history[-6:]:
                messages.append({
                    "role": "user" if msg["from"] == "user" else "assistant", 
                    "content": msg["text"]
                })
            
            messages.append({"role": "user", "content": question})
            
            response = anthropic_client.messages.create(
                model="claude-3-sonnet-20240229",
                max_tokens=1500,
                messages=messages
            )
            
            return response.content[0].text
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ Claude API: {e}")
            return "‚ùå –í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –Ω–∞—à–æ–≥–æ –∞–¥–≤–æ–∫–∞—Ç–∞."

    async def send_greeting(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, username: str):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –Ω–æ–≤–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
        greeting_start = random.choice(self.greeting_variants).format(username=username)
        
        greeting_text = f"""
{greeting_start}

**–©–æ —è –º–æ–∂—É:**
‚öñÔ∏è –ù–∞–¥–∞–≤–∞—Ç–∏ —é—Ä–∏–¥–∏—á–Ω—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
üìã –ü–æ—Å–∏–ª–∞—Ç–∏—Å—è –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–µ –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–æ  
üë®‚Äçüíº –ó'—î–¥–Ω—É–≤–∞—Ç–∏ –∑ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–º –∞–¥–≤–æ–∫–∞—Ç–æ–º
üí° –î–∞–≤–∞—Ç–∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏

**–Ø–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é:**
‚úçÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î —é—Ä–∏–¥–∏—á–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, —ñ —è –Ω–∞–¥–∞–º –¥–µ—Ç–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ –Ω–∞ –∑–∞–∫–æ–Ω–∏ –£–∫—Ä–∞—ó–Ω–∏.

üîπ **–ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç–∞–Ω—å:**
‚Ä¢ "–ß–∏ –º–æ–∂–µ —Ä–æ–±–æ—Ç–æ–¥–∞–≤–µ—Ü—å –∑–≤—ñ–ª—å–Ω–∏—Ç–∏ –∑–∞ –ø—Ä–æ–≥—É–ª?"
‚Ä¢ "–Ø–∫ –æ—Ñ–æ—Ä–º–∏—Ç–∏ —Å–ø–∞–¥—â–∏–Ω—É?"
‚Ä¢ "–©–æ —Ä–æ–±–∏—Ç–∏ –ø—Ä–∏ –ø–æ—Ä—É—à–µ–Ω–Ω—ñ –ø—Ä–∞–≤ —Å–ø–æ–∂–∏–≤–∞—á–∞?"

üìû **–ü–æ—Ç—Ä—ñ–±–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è?** –ó–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞—à–∏–º –∞–¥–≤–æ–∫–∞—Ç–æ–º!
        """
        
        keyboard = [
            [InlineKeyboardButton("üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º", callback_data="contact_lawyer")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(greeting_text, reply_markup=reply_markup, parse_mode='Markdown')

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        message_text = update.message.text
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if user_id not in self.user_conversations:
            await self.send_greeting(update, context, user_id, username)
            self.user_conversations[user_id] = []
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É –ª–µ–∫—Å–∏–∫—É
        if self.contains_profanity(message_text):
            await update.message.reply_text(
                f"‚ö†Ô∏è {username}, –±—É–¥—å –ª–∞—Å–∫–∞, –¥–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å –≤–≤—ñ—á–ª–∏–≤–æ—Å—Ç—ñ –≤ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—ñ."
            )
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ —é—Ä–∏–¥–∏—á–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
        if not self.is_legal_question(message_text):
            non_legal_responses = [
                "‚ùå –í–∏–±–∞—á—Ç–µ, –∞–ª–µ –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–µ —Å—Ç–æ—Å—É—î—Ç—å—Å—è —é—Ä–∏–¥–∏—á–Ω–æ—ó —Ç–µ–º–∞—Ç–∏–∫–∏.",
                "üèõÔ∏è –Ø –∫–æ–Ω—Å—É–ª—å—Ç—É—é —Ç—ñ–ª—å–∫–∏ –∑ –ø—Ä–∞–≤–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å—Ñ–æ—Ä–º—É–ª—é–π—Ç–µ —é—Ä–∏–¥–∏—á–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.",
                "‚öñÔ∏è –ú–æ—è —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è - —é—Ä–∏–¥–∏—á–Ω—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó. –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤ –ø—Ä–∞–≤–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω–Ω—è—Ö?"
            ]
            
            response = random.choice(non_legal_responses)
            
            keyboard = [
                [InlineKeyboardButton("üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º", callback_data="contact_lawyer")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(response, reply_markup=reply_markup)
            return

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤ —ñ—Å—Ç–æ—Ä—ñ—é
        self.user_conversations[user_id].append({
            "from": "user",
            "text": message_text,
            "timestamp": datetime.now().isoformat()
        })

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É
        await update.message.reply_text(
            "‚úÖ **–í–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è!**\n\n"
            "ü§ñ –ì–µ–Ω–µ—Ä—É—é –¥–µ—Ç–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å...\n"
            "‚è∞ –¶–µ –∑–∞–π–º–µ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥.",
            parse_mode='Markdown'
        )

        # –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä—É
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Claude
        claude_response = await self.get_claude_response(message_text, user_id)
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
        self.user_conversations[user_id].append({
            "from": "bot",
            "text": claude_response,
            "timestamp": datetime.now().isoformat()
        })

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        final_response = f"""
{claude_response}

---
üë®‚Äçüíº **–ü–æ—Ç—Ä—ñ–±–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –∞–±–æ –¥–æ–ø–æ–º–æ–≥–∞ —É –≤–∏—Ä—ñ—à–µ–Ω–Ω—ñ —Å–∏—Ç—É–∞—Ü—ñ—ó?**
–ù–∞—à –∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –∞–¥–≤–æ–∫–∞—Ç –≥–æ—Ç–æ–≤–∏–π –Ω–∞–¥–∞—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—É –¥–æ–ø–æ–º–æ–≥—É!
        """
        
        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º", callback_data="contact_lawyer")],
            [InlineKeyboardButton("üí∞ –ü–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É", callback_data="payment_info")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        await update.message.reply_text(final_response, reply_markup=reply_markup, parse_mode='Markdown')

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "contact_lawyer":
            keyboard = [
                [InlineKeyboardButton("üìû –ü–æ–¥–∑–≤–æ–Ω–∏—Ç–∏", callback_data="call_lawyer")],
                [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏", callback_data="chat_lawyer")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üìû **–ó–≤'—è–∑–æ–∫ –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º**\n\n–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –∑–≤'—è–∑–∫—É:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        elif query.data == "call_lawyer":
            phone_text = f"""
üìû **–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∑–≤'—è–∑–∫—É –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º:**

**{LAWYER_PHONE}**

üïê **–†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏:** –ü–Ω-–ü—Ç 9:00-18:00
‚è∞ **–¢–µ—Ä–º—ñ–Ω–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è:** –ó–∞ –¥–æ–º–æ–≤–ª–µ–Ω—ñ—Å—Ç—é

üí° –Ø–∫—â–æ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ - –∑–∞–ª–∏—à—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å —á–∞—Ç–æ–º.
            """
            
            keyboard = [
                [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ –≤ —á–∞—Ç", callback_data="chat_lawyer")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="contact_lawyer")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(phone_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        elif query.data == "chat_lawyer":
            chat_text = f"""
üí¨ **–ó–≤'—è–∑–æ–∫ –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º –≤ Telegram:**

–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—à–æ–º—É –∞–¥–≤–æ–∫–∞—Ç—É: @{LAWYER_USERNAME}

üì± **–©–æ –≤–∫–ª—é—á–∏—Ç–∏ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:**
‚Ä¢ –ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à—ñ—Ç—å –≤–∞—à—É —Å–∏—Ç—É–∞—Ü—ñ—é
‚Ä¢ –í–∫–∞–∂—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω–Ω—è
‚Ä¢ –î–æ–¥–∞–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ

‚öñÔ∏è **–ê–¥–≤–æ–∫–∞—Ç –Ω–∞–¥–∞—Å—Ç—å:**
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏
‚Ä¢ –î–æ–ø–æ–º–æ–≥—É —É –≤–∏—Ä—ñ—à–µ–Ω–Ω—ñ —Å–ø—Ä–∞–≤–∏
            """
            
            keyboard = [
                [InlineKeyboardButton("üì± –ù–∞–ø–∏—Å–∞—Ç–∏ @" + LAWYER_USERNAME, url=f"https://t.me/{LAWYER_USERNAME}")],
                [InlineKeyboardButton("üìû –ü–æ–¥–∑–≤–æ–Ω–∏—Ç–∏", callback_data="call_lawyer")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(chat_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        elif query.data == "payment_info":
            payment_text = f"""
üí∞ **–ü–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ –æ–ø–ª–∞—Ç–∏ –ø–æ—Å–ª—É–≥**

–î–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è –≤–∞—Ä—Ç–æ—Å—Ç—ñ —é—Ä–∏–¥–∏—á–Ω–∏—Ö –ø–æ—Å–ª—É–≥ —Ç–∞ —É–º–æ–≤ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –¥–æ –Ω–∞—à–æ–≥–æ –∞–¥–≤–æ–∫–∞—Ç–∞.

üìû –¢–µ–ª–µ—Ñ–æ–Ω: **{LAWYER_PHONE}**
üí¨ Telegram: @{LAWYER_USERNAME}

üí° **–ü–µ—Ä—à–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è** –º–æ–∂–µ –±—É—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ—é –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è.
            """
            
            keyboard = [
                [InlineKeyboardButton("üìû –ü–æ–¥–∑–≤–æ–Ω–∏—Ç–∏", callback_data="call_lawyer")],
                [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏", callback_data="chat_lawyer")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(payment_text, reply_markup=reply_markup, parse_mode='Markdown')

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ø–æ–º–æ–≥–∏"""
        help_text = f"""
üèõÔ∏è **–Æ—Ä–∏–¥–∏—á–Ω–∏–π –±–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç**

**–©–æ —è –º–æ–∂—É:**
‚úÖ –ù–∞–¥–∞–≤–∞—Ç–∏ —é—Ä–∏–¥–∏—á–Ω—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
‚úÖ –ü–æ—Å–∏–ª–∞—Ç–∏—Å—è –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–µ –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–æ
‚úÖ –ó'—î–¥–Ω—É–≤–∞—Ç–∏ –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö —Å–ø—Ä–∞–≤
‚úÖ –Ü–Ω—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –ø—Ä–æ –ø—Ä–∞–≤–æ–≤—É –±–∞–∑—É

**–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:**
1Ô∏è‚É£ –ó–∞–¥–∞–π—Ç–µ —é—Ä–∏–¥–∏—á–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
2Ô∏è‚É£ –û—Ç—Ä–∏–º–∞–π—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ –Ω–∞ –∑–∞–∫–æ–Ω–∏
3Ô∏è‚É£ –ü—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–≤–æ–∫–∞—Ç–æ–º

**–ö–æ–º–∞–Ω–¥–∏:**
/start - –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞

üìû **–ê–¥–≤–æ–∫–∞—Ç:** {LAWYER_PHONE}
üí¨ **Telegram:** @{LAWYER_USERNAME}
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫"""
        logger.error(f"Update {update} caused error {context.error}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞
    legal_bot = LegalBot()
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–∞
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    app.add_handler(CommandHandler("start", legal_bot.start_command))
    app.add_handler(CommandHandler("help", legal_bot.help_command))
    app.add_handler(CallbackQueryHandler(legal_bot.handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, legal_bot.handle_message))
    
    # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
    app.add_error_handler(legal_bot.error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("üèõÔ∏è –Æ—Ä–∏–¥–∏—á–Ω–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    print(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –∞–¥–≤–æ–∫–∞—Ç–∞: {LAWYER_PHONE}")
    print(f"üí¨ Telegram –∞–¥–≤–æ–∫–∞—Ç–∞: @{LAWYER_USERNAME}")
    
    # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º—ñ polling
    app.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()
